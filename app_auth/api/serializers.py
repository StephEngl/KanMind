"""
This module contains serializers for user authentication and registration.

Provides:
- UserInfoSerializer: Serializes user ID, email, and full name for display.
- RegistrationSerializer: Handles user registration with password confirmation
  and email uniqueness validation.

These serializers are used in the user registration and login API views to
validate input and format output data accordingly.
"""

# 1. Standard library
from django.contrib.auth.models import User

# 2. Third-party
# DRF serializer base classes
from rest_framework import serializers



class UserInfoSerializer(serializers.ModelSerializer):
    """
    Summary:
        Serializer for displaying basic user information.

    GET:
        - Returns user data including ID, email, and full name.
        - The 'fullname' field is dynamically generated by concatenating first and last names.

    Permissions:
        - Follows the permissions set by the calling view (e.g., IsAuthenticated).

    Details:
        - Returns fields 'id', 'email', 'fullname'.
    """
    fullname = serializers.SerializerMethodField()

    class Meta:
        model = User
        fields = ['id', 'email', 'fullname']

    def get_fullname(self, obj):
        """
        Returns the full name, combining first and last names.

        Args: obj (User): User instance.

        Returns: 
            - The 'fullname' field is implemented via the 'get_fullname' method.
            - Output format: JSON with fields 'id', 'email', 'fullname'.
            - No write operations are implemented in this serializer.
        """
        return f"{obj.first_name} {obj.last_name}".strip()


class RegistrationSerializer(serializers.ModelSerializer):
    """
    Summary:
        Serializer for registering a new user, including password validation and full name processing.

    POST:
        - Creates a new user with the provided email, password, and full name.
        - Validates that the password and repeated password match.
        - Ensures that the email address is unique.
        - Splits the fullname into first_name and last_name fields for storage.

    Permissions:
        - Publicly accessible for user registration (e.g., AllowAny).

    Details:
        - 'repeated_password' is write-only and used to confirm password entry.
        - Custom email validation ensures uniqueness.
        - Uses 'set_password' to securely store the password.
        - Returns the newly created User object.
    """
    repeated_password = serializers.CharField(write_only=True)
    fullname = serializers.CharField(max_length=255)

    class Meta:
        model = User
        fields = ['id', 'fullname', 'password', 'repeated_password', 'email']
        extra_kwargs = {'password': {'write_only': True}}

    def validate_email(self, value):
            """
        Validates that the email is unique in the system.

        Args: value (str): Email value to validate.

        Raises: serializers.ValidationError: If email is already in use.

        Returns: str: Validated email.
        """
            if User.objects.filter(email=value).exists():
                raise serializers.ValidationError({"email": "Email is already in use."})
            return value

    def save(self):
        """
        Creates and saves a new User instance after validating passwords and splitting the full name.

        Raises: serializers.ValidationError: If password and repeated password do not match.

        Returns: User: Newly created user instance.
        """
        pw = self.validated_data['password']
        repeated_pw = self.validated_data['repeated_password']

        if pw != repeated_pw:
            raise serializers.ValidationError({"password": "Passwords doesn't match."})

        fullname = self.validated_data['fullname']
        parts = fullname.split(' ', 1)
        first_name = parts[0]
        last_name = parts[1] if len(parts) > 1 else ''
        
        account = User(
            username=self.validated_data['email'],
            email=self.validated_data.get('email', ''),
            first_name = first_name,
            last_name = last_name
        )
        account.set_password(pw)
        account.save()
        return account
